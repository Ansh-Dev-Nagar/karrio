/**
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023.1rc
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { CommodityData } from './CommodityData';
/**
 *
 * @export
 * @interface ParcelData
 */
export interface ParcelData {
    /**
     * The parcel's weight
     * @type {number}
     * @memberof ParcelData
     */
    weight: number;
    /**
     * The parcel's width
     * @type {number}
     * @memberof ParcelData
     */
    width?: number | null;
    /**
     * The parcel's height
     * @type {number}
     * @memberof ParcelData
     */
    height?: number | null;
    /**
     * The parcel's length
     * @type {number}
     * @memberof ParcelData
     */
    length?: number | null;
    /**
     * The parcel's packaging type.<br/>
     *         **Note that the packaging is optional when using a package preset.**<br/>
     *         values: <br/>
     *         `envelope` `pak` `tube` `pallet` `small_box` `medium_box` `your_packaging`<br/>
     *         For carrier specific packaging types, please consult the reference.
     *
     * @type {string}
     * @memberof ParcelData
     */
    packaging_type?: string | null;
    /**
     * The parcel's package preset.<br/>
     *         For carrier specific package presets, please consult the reference.
     *
     * @type {string}
     * @memberof ParcelData
     */
    package_preset?: string | null;
    /**
     * The parcel's description
     * @type {string}
     * @memberof ParcelData
     */
    description?: string | null;
    /**
     * The parcel's content description
     * @type {string}
     * @memberof ParcelData
     */
    content?: string | null;
    /**
     * Indicates if the parcel is composed of documents only
     * @type {boolean}
     * @memberof ParcelData
     */
    is_document?: boolean | null;
    /**
     * The parcel's weight unit
     * @type {string}
     * @memberof ParcelData
     */
    weight_unit: ParcelDataWeightUnitEnum;
    /**
     * The parcel's dimension unit
     * @type {string}
     * @memberof ParcelData
     */
    dimension_unit?: ParcelDataDimensionUnitEnum;
    /**
     * The parcel items.
     * @type {Array<CommodityData>}
     * @memberof ParcelData
     */
    items?: Array<CommodityData>;
    /**
     * The parcel reference number.<br/>
     *         (can be used as tracking number for custom carriers)
     *
     * @type {string}
     * @memberof ParcelData
     */
    reference_number?: string | null;
    /**
     * The parcel's freight class for pallet and freight shipments.
     * @type {string}
     * @memberof ParcelData
     */
    freight_class?: string | null;
    /**
     * <details>
     *         <summary>Parcel specific options.</summary>
     *
     *         {
     *             "insurance": "100.00",
     *             "insured_by": "carrier",
     *         }
     *
     * @type {{ [key: string]: any; }}
     * @memberof ParcelData
     */
    options?: {
        [key: string]: any;
    };
}
/**
 * @export
 */
export declare const ParcelDataWeightUnitEnum: {
    readonly Kg: "KG";
    readonly Lb: "LB";
};
export type ParcelDataWeightUnitEnum = typeof ParcelDataWeightUnitEnum[keyof typeof ParcelDataWeightUnitEnum];
/**
 * @export
 */
export declare const ParcelDataDimensionUnitEnum: {
    readonly Cm: "CM";
    readonly In: "IN";
    readonly Null: "null";
};
export type ParcelDataDimensionUnitEnum = typeof ParcelDataDimensionUnitEnum[keyof typeof ParcelDataDimensionUnitEnum];
/**
 * Check if a given object implements the ParcelData interface.
 */
export declare function instanceOfParcelData(value: object): boolean;
export declare function ParcelDataFromJSON(json: any): ParcelData;
export declare function ParcelDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): ParcelData;
export declare function ParcelDataToJSON(value?: ParcelData | null): any;
