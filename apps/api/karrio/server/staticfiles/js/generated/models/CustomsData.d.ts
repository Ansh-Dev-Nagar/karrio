/**
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023.1rc
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { CommodityData } from './CommodityData';
import type { CustomsDataDutyBillingAddress } from './CustomsDataDutyBillingAddress';
import type { CustomsDuty } from './CustomsDuty';
/**
 *
 * @export
 * @interface CustomsData
 */
export interface CustomsData {
    /**
     * The parcel content items
     * @type {Array<CommodityData>}
     * @memberof CustomsData
     */
    commodities: Array<CommodityData>;
    /**
     *
     * @type {CustomsDuty}
     * @memberof CustomsData
     */
    duty?: CustomsDuty | null;
    /**
     *
     * @type {CustomsDataDutyBillingAddress}
     * @memberof CustomsData
     */
    duty_billing_address?: CustomsDataDutyBillingAddress | null;
    /**
     *
     * @type {string}
     * @memberof CustomsData
     */
    content_type?: CustomsDataContentTypeEnum;
    /**
     *
     * @type {string}
     * @memberof CustomsData
     */
    content_description?: string | null;
    /**
     * The customs 'term of trade' also known as 'incoterm'
     * @type {string}
     * @memberof CustomsData
     */
    incoterm?: CustomsDataIncotermEnum;
    /**
     * The invoice reference number
     * @type {string}
     * @memberof CustomsData
     */
    invoice?: string | null;
    /**
     * The invoice date
     * @type {string}
     * @memberof CustomsData
     */
    invoice_date?: string | null;
    /**
     * Indicates if the shipment is commercial
     * @type {boolean}
     * @memberof CustomsData
     */
    commercial_invoice?: boolean | null;
    /**
     * Indicate that signer certified confirmed all
     * @type {boolean}
     * @memberof CustomsData
     */
    certify?: boolean | null;
    /**
     *
     * @type {string}
     * @memberof CustomsData
     */
    signer?: string | null;
    /**
     * <details>
     *         <summary>Customs identification options.</summary>
     *
     *         {
     *             "aes": "5218487281",
     *             "eel_pfc": "5218487281",
     *             "license_number": "5218487281",
     *             "certificate_number": "5218487281",
     *             "nip_number": "5218487281",
     *             "eori_number": "5218487281",
     *             "vat_registration_number": "5218487281",
     *         }
     *
     * @type {{ [key: string]: any; }}
     * @memberof CustomsData
     */
    options?: {
        [key: string]: any;
    };
}
/**
 * @export
 */
export declare const CustomsDataContentTypeEnum: {
    readonly Documents: "documents";
    readonly Gift: "gift";
    readonly Sample: "sample";
    readonly Merchandise: "merchandise";
    readonly ReturnMerchandise: "return_merchandise";
    readonly Other: "other";
    readonly Empty: "";
    readonly Null: "null";
};
export type CustomsDataContentTypeEnum = typeof CustomsDataContentTypeEnum[keyof typeof CustomsDataContentTypeEnum];
/**
 * @export
 */
export declare const CustomsDataIncotermEnum: {
    readonly Cfr: "CFR";
    readonly Cif: "CIF";
    readonly Cip: "CIP";
    readonly Cpt: "CPT";
    readonly Daf: "DAF";
    readonly Ddp: "DDP";
    readonly Ddu: "DDU";
    readonly Deq: "DEQ";
    readonly Des: "DES";
    readonly Exw: "EXW";
    readonly Fas: "FAS";
    readonly Fca: "FCA";
    readonly Fob: "FOB";
    readonly Null: "null";
};
export type CustomsDataIncotermEnum = typeof CustomsDataIncotermEnum[keyof typeof CustomsDataIncotermEnum];
/**
 * Check if a given object implements the CustomsData interface.
 */
export declare function instanceOfCustomsData(value: object): boolean;
export declare function CustomsDataFromJSON(json: any): CustomsData;
export declare function CustomsDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomsData;
export declare function CustomsDataToJSON(value?: CustomsData | null): any;
