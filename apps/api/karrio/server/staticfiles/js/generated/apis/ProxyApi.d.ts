/**
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023.1rc
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { OperationResponse, PickupCancelRequest, PickupRequest, PickupResponse, PickupUpdateRequest, RateRequest, RateResponse, ShipmentCancelRequest, ShippingRequest, ShippingResponse, TrackingData, TrackingResponse } from '../models';
export interface BuyLabelRequest {
    shippingRequest: ShippingRequest;
}
export interface CancelPickupRequest {
    carrierName: CancelPickupCarrierNameEnum;
    pickupCancelRequest: PickupCancelRequest;
}
export interface FetchRatesRequest {
    rateRequest: RateRequest;
}
export interface GetTrackingRequest {
    trackingData: TrackingData;
    hub?: string;
}
export interface SchedulePickupRequest {
    carrierName: SchedulePickupCarrierNameEnum;
    pickupRequest: PickupRequest;
}
export interface TrackShipmentRequest {
    carrierName: TrackShipmentCarrierNameEnum;
    trackingNumber: string;
    hub?: string;
}
export interface UpdatePickupRequest {
    carrierName: UpdatePickupCarrierNameEnum;
    pickupUpdateRequest: PickupUpdateRequest;
}
export interface VoidLabelRequest {
    carrierName: VoidLabelCarrierNameEnum;
    shipmentCancelRequest: ShipmentCancelRequest;
}
/**
 *
 */
export declare class ProxyApi extends runtime.BaseAPI {
    /**
     * Once the shipping rates are retrieved, provide the required info to submit the shipment by specifying your preferred rate.
     * Buy a shipment label
     */
    buyLabelRaw(requestParameters: BuyLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ShippingResponse>>;
    /**
     * Once the shipping rates are retrieved, provide the required info to submit the shipment by specifying your preferred rate.
     * Buy a shipment label
     */
    buyLabel(requestParameters: BuyLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ShippingResponse>;
    /**
     * Cancel a pickup previously scheduled
     * Cancel a pickup
     */
    cancelPickupRaw(requestParameters: CancelPickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>>;
    /**
     * Cancel a pickup previously scheduled
     * Cancel a pickup
     */
    cancelPickup(requestParameters: CancelPickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse>;
    /**
     *  The Shipping process begins by fetching rates for your shipment. Use this service to fetch a shipping rates available.
     * Fetch shipment rates
     */
    fetchRatesRaw(requestParameters: FetchRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RateResponse>>;
    /**
     *  The Shipping process begins by fetching rates for your shipment. Use this service to fetch a shipping rates available.
     * Fetch shipment rates
     */
    fetchRates(requestParameters: FetchRatesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RateResponse>;
    /**
     * You can track a shipment by specifying the carrier and the shipment tracking number.
     * Get tracking details
     */
    getTrackingRaw(requestParameters: GetTrackingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackingResponse>>;
    /**
     * You can track a shipment by specifying the carrier and the shipment tracking number.
     * Get tracking details
     */
    getTracking(requestParameters: GetTrackingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackingResponse>;
    /**
     * Schedule one or many parcels pickup
     * Schedule a pickup
     */
    schedulePickupRaw(requestParameters: SchedulePickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PickupResponse>>;
    /**
     * Schedule one or many parcels pickup
     * Schedule a pickup
     */
    schedulePickup(requestParameters: SchedulePickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PickupResponse>;
    /**
     * You can track a shipment by specifying the carrier and the shipment tracking number.
     * Track a shipment
     */
    trackShipmentRaw(requestParameters: TrackShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackingResponse>>;
    /**
     * You can track a shipment by specifying the carrier and the shipment tracking number.
     * Track a shipment
     */
    trackShipment(requestParameters: TrackShipmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackingResponse>;
    /**
     * Modify a scheduled pickup
     * Update a pickup
     */
    updatePickupRaw(requestParameters: UpdatePickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PickupResponse>>;
    /**
     * Modify a scheduled pickup
     * Update a pickup
     */
    updatePickup(requestParameters: UpdatePickupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PickupResponse>;
    /**
     * Cancel a shipment and the label previously created
     * Void a shipment label
     */
    voidLabelRaw(requestParameters: VoidLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResponse>>;
    /**
     * Cancel a shipment and the label previously created
     * Void a shipment label
     */
    voidLabel(requestParameters: VoidLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResponse>;
}
/**
 * @export
 */
export declare const CancelPickupCarrierNameEnum: {
    readonly AmazonMws: "amazon_mws";
    readonly Aramex: "aramex";
    readonly Australiapost: "australiapost";
    readonly Canadapost: "canadapost";
    readonly Canpar: "canpar";
    readonly Chronopost: "chronopost";
    readonly DhlExpress: "dhl_express";
    readonly DhlPoland: "dhl_poland";
    readonly DhlUniversal: "dhl_universal";
    readonly Dicom: "dicom";
    readonly Dpdhl: "dpdhl";
    readonly Easypost: "easypost";
    readonly Eshipper: "eshipper";
    readonly Fedex: "fedex";
    readonly Freightcom: "freightcom";
    readonly Generic: "generic";
    readonly Purolator: "purolator";
    readonly Royalmail: "royalmail";
    readonly Sendle: "sendle";
    readonly SfExpress: "sf_express";
    readonly Tnt: "tnt";
    readonly Ups: "ups";
    readonly UpsFreight: "ups_freight";
    readonly Usps: "usps";
    readonly UspsInternational: "usps_international";
    readonly Yanwen: "yanwen";
    readonly Yunexpress: "yunexpress";
};
export type CancelPickupCarrierNameEnum = typeof CancelPickupCarrierNameEnum[keyof typeof CancelPickupCarrierNameEnum];
/**
 * @export
 */
export declare const SchedulePickupCarrierNameEnum: {
    readonly AmazonMws: "amazon_mws";
    readonly Aramex: "aramex";
    readonly Australiapost: "australiapost";
    readonly Canadapost: "canadapost";
    readonly Canpar: "canpar";
    readonly Chronopost: "chronopost";
    readonly DhlExpress: "dhl_express";
    readonly DhlPoland: "dhl_poland";
    readonly DhlUniversal: "dhl_universal";
    readonly Dicom: "dicom";
    readonly Dpdhl: "dpdhl";
    readonly Easypost: "easypost";
    readonly Eshipper: "eshipper";
    readonly Fedex: "fedex";
    readonly Freightcom: "freightcom";
    readonly Generic: "generic";
    readonly Purolator: "purolator";
    readonly Royalmail: "royalmail";
    readonly Sendle: "sendle";
    readonly SfExpress: "sf_express";
    readonly Tnt: "tnt";
    readonly Ups: "ups";
    readonly UpsFreight: "ups_freight";
    readonly Usps: "usps";
    readonly UspsInternational: "usps_international";
    readonly Yanwen: "yanwen";
    readonly Yunexpress: "yunexpress";
};
export type SchedulePickupCarrierNameEnum = typeof SchedulePickupCarrierNameEnum[keyof typeof SchedulePickupCarrierNameEnum];
/**
 * @export
 */
export declare const TrackShipmentCarrierNameEnum: {
    readonly AmazonMws: "amazon_mws";
    readonly Aramex: "aramex";
    readonly Australiapost: "australiapost";
    readonly Canadapost: "canadapost";
    readonly Canpar: "canpar";
    readonly Chronopost: "chronopost";
    readonly DhlExpress: "dhl_express";
    readonly DhlPoland: "dhl_poland";
    readonly DhlUniversal: "dhl_universal";
    readonly Dicom: "dicom";
    readonly Dpdhl: "dpdhl";
    readonly Fedex: "fedex";
    readonly Generic: "generic";
    readonly Purolator: "purolator";
    readonly Royalmail: "royalmail";
    readonly Sendle: "sendle";
    readonly SfExpress: "sf_express";
    readonly Tnt: "tnt";
    readonly Ups: "ups";
    readonly UpsFreight: "ups_freight";
    readonly Usps: "usps";
    readonly UspsInternational: "usps_international";
    readonly Yanwen: "yanwen";
    readonly Yunexpress: "yunexpress";
};
export type TrackShipmentCarrierNameEnum = typeof TrackShipmentCarrierNameEnum[keyof typeof TrackShipmentCarrierNameEnum];
/**
 * @export
 */
export declare const UpdatePickupCarrierNameEnum: {
    readonly AmazonMws: "amazon_mws";
    readonly Aramex: "aramex";
    readonly Australiapost: "australiapost";
    readonly Canadapost: "canadapost";
    readonly Canpar: "canpar";
    readonly Chronopost: "chronopost";
    readonly DhlExpress: "dhl_express";
    readonly DhlPoland: "dhl_poland";
    readonly DhlUniversal: "dhl_universal";
    readonly Dicom: "dicom";
    readonly Dpdhl: "dpdhl";
    readonly Easypost: "easypost";
    readonly Eshipper: "eshipper";
    readonly Fedex: "fedex";
    readonly Freightcom: "freightcom";
    readonly Generic: "generic";
    readonly Purolator: "purolator";
    readonly Royalmail: "royalmail";
    readonly Sendle: "sendle";
    readonly SfExpress: "sf_express";
    readonly Tnt: "tnt";
    readonly Ups: "ups";
    readonly UpsFreight: "ups_freight";
    readonly Usps: "usps";
    readonly UspsInternational: "usps_international";
    readonly Yanwen: "yanwen";
    readonly Yunexpress: "yunexpress";
};
export type UpdatePickupCarrierNameEnum = typeof UpdatePickupCarrierNameEnum[keyof typeof UpdatePickupCarrierNameEnum];
/**
 * @export
 */
export declare const VoidLabelCarrierNameEnum: {
    readonly AmazonMws: "amazon_mws";
    readonly Aramex: "aramex";
    readonly Australiapost: "australiapost";
    readonly Canadapost: "canadapost";
    readonly Canpar: "canpar";
    readonly Chronopost: "chronopost";
    readonly DhlExpress: "dhl_express";
    readonly DhlPoland: "dhl_poland";
    readonly DhlUniversal: "dhl_universal";
    readonly Dicom: "dicom";
    readonly Dpdhl: "dpdhl";
    readonly Easypost: "easypost";
    readonly Eshipper: "eshipper";
    readonly Fedex: "fedex";
    readonly Freightcom: "freightcom";
    readonly Generic: "generic";
    readonly Purolator: "purolator";
    readonly Royalmail: "royalmail";
    readonly Sendle: "sendle";
    readonly SfExpress: "sf_express";
    readonly Tnt: "tnt";
    readonly Ups: "ups";
    readonly UpsFreight: "ups_freight";
    readonly Usps: "usps";
    readonly UspsInternational: "usps_international";
    readonly Yanwen: "yanwen";
    readonly Yunexpress: "yunexpress";
};
export type VoidLabelCarrierNameEnum = typeof VoidLabelCarrierNameEnum[keyof typeof VoidLabelCarrierNameEnum];
