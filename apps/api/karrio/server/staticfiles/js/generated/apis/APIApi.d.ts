/**
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023.1rc
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { TokenObtainPair, TokenPair, TokenRefresh, TokenVerify, VerifiedTokenObtainPair } from '../models';
export interface AuthenticateRequest {
    tokenObtainPair: TokenObtainPair;
}
export interface GetVerifiedTokenRequest {
    verifiedTokenObtainPair: VerifiedTokenObtainPair;
}
export interface RefreshTokenRequest {
    tokenRefresh: TokenRefresh;
}
export interface VerifyTokenRequest {
    tokenVerify: TokenVerify;
}
/**
 *
 */
export declare class APIApi extends runtime.BaseAPI {
    /**
     * Authenticate the user and return a token pair
     * Obtain auth token pair
     */
    authenticateRaw(requestParameters: AuthenticateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenPair>>;
    /**
     * Authenticate the user and return a token pair
     * Obtain auth token pair
     */
    authenticate(requestParameters: AuthenticateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenPair>;
    /**
     * Data References
     */
    dataRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{
        [key: string]: any;
    }>>;
    /**
     * Data References
     */
    data(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{
        [key: string]: any;
    }>;
    /**
     * Get a verified JWT token pair by submitting a Two-Factor authentication code.
     * Get verified JWT token
     */
    getVerifiedTokenRaw(requestParameters: GetVerifiedTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenPair>>;
    /**
     * Get a verified JWT token pair by submitting a Two-Factor authentication code.
     * Get verified JWT token
     */
    getVerifiedToken(requestParameters: GetVerifiedTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenPair>;
    /**
     * Instance Metadata
     */
    pingRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{
        [key: string]: any;
    }>>;
    /**
     * Instance Metadata
     */
    ping(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{
        [key: string]: any;
    }>;
    /**
     * Authenticate the user and return a token pair
     * Refresh auth token
     */
    refreshTokenRaw(requestParameters: RefreshTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenPair>>;
    /**
     * Authenticate the user and return a token pair
     * Refresh auth token
     */
    refreshToken(requestParameters: RefreshTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenPair>;
    /**
     * Verify an existent authentication token
     * Verify token
     */
    verifyTokenRaw(requestParameters: VerifyTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{
        [key: string]: any;
    }>>;
    /**
     * Verify an existent authentication token
     * Verify token
     */
    verifyToken(requestParameters: VerifyTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{
        [key: string]: any;
    }>;
}
