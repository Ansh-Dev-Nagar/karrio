/**
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023.1rc
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { TrackerList, TrackerUpdateData, TrackingData, TrackingStatus } from '../models';
export interface AddRequest {
    trackingData: TrackingData;
    hub?: string;
}
export interface CreateRequest {
    carrierName: string;
    carrierName2: CreateCarrierNameEnum;
    trackingNumber: string;
    hub?: string;
}
export interface ListRequest {
    carrierName?: ListCarrierNameEnum;
    createdAfter?: Date;
    createdBefore?: Date;
    status?: ListStatusEnum;
    trackingNumber?: string;
}
export interface RemoveRequest {
    idOrTrackingNumber: string;
}
export interface RetrievesRequest {
    idOrTrackingNumber: string;
}
export interface UpdateRequest {
    idOrTrackingNumber: string;
    trackerUpdateData?: TrackerUpdateData;
}
/**
 *
 */
export declare class TrackersApi extends runtime.BaseAPI {
    /**
     * This API creates or retrieves (if existent) a tracking status object containing the details and events of a shipping in progress.
     * Add a package tracker
     */
    addRaw(requestParameters: AddRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackingStatus>>;
    /**
     * This API creates or retrieves (if existent) a tracking status object containing the details and events of a shipping in progress.
     * Add a package tracker
     */
    add(requestParameters: AddRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackingStatus>;
    /**
     * This API creates or retrieves (if existent) a tracking status object containing the details and events of a shipping in progress.
     * Create a package tracker
     */
    createRaw(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackingStatus>>;
    /**
     * This API creates or retrieves (if existent) a tracking status object containing the details and events of a shipping in progress.
     * Create a package tracker
     */
    create(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackingStatus>;
    /**
     * Retrieve all shipment trackers.
     * List all package trackers
     */
    listRaw(requestParameters: ListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackerList>>;
    /**
     * Retrieve all shipment trackers.
     * List all package trackers
     */
    list(requestParameters?: ListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackerList>;
    /**
     * Discard a package tracker.
     * Discard a package tracker
     */
    removeRaw(requestParameters: RemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackingStatus>>;
    /**
     * Discard a package tracker.
     * Discard a package tracker
     */
    remove(requestParameters: RemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackingStatus>;
    /**
     * Retrieve a package tracker
     * Retrieves a package tracker
     */
    retrievesRaw(requestParameters: RetrievesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackingStatus>>;
    /**
     * Retrieve a package tracker
     * Retrieves a package tracker
     */
    retrieves(requestParameters: RetrievesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackingStatus>;
    /**
     * Mixin to log requests
     * Update tracker data
     */
    updateRaw(requestParameters: UpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackingStatus>>;
    /**
     * Mixin to log requests
     * Update tracker data
     */
    update(requestParameters: UpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackingStatus>;
}
/**
 * @export
 */
export declare const CreateCarrierNameEnum: {
    readonly AmazonMws: "amazon_mws";
    readonly Aramex: "aramex";
    readonly Australiapost: "australiapost";
    readonly Canadapost: "canadapost";
    readonly Canpar: "canpar";
    readonly Chronopost: "chronopost";
    readonly DhlExpress: "dhl_express";
    readonly DhlPoland: "dhl_poland";
    readonly DhlUniversal: "dhl_universal";
    readonly Dicom: "dicom";
    readonly Dpdhl: "dpdhl";
    readonly Fedex: "fedex";
    readonly Generic: "generic";
    readonly Purolator: "purolator";
    readonly Royalmail: "royalmail";
    readonly Sendle: "sendle";
    readonly SfExpress: "sf_express";
    readonly Tnt: "tnt";
    readonly Ups: "ups";
    readonly UpsFreight: "ups_freight";
    readonly Usps: "usps";
    readonly UspsInternational: "usps_international";
    readonly Yanwen: "yanwen";
    readonly Yunexpress: "yunexpress";
};
export type CreateCarrierNameEnum = typeof CreateCarrierNameEnum[keyof typeof CreateCarrierNameEnum];
/**
 * @export
 */
export declare const ListCarrierNameEnum: {
    readonly AmazonMws: "amazon_mws";
    readonly Aramex: "aramex";
    readonly Australiapost: "australiapost";
    readonly Canadapost: "canadapost";
    readonly Canpar: "canpar";
    readonly Chronopost: "chronopost";
    readonly DhlExpress: "dhl_express";
    readonly DhlPoland: "dhl_poland";
    readonly DhlUniversal: "dhl_universal";
    readonly Dicom: "dicom";
    readonly Dpdhl: "dpdhl";
    readonly Easypost: "easypost";
    readonly Eshipper: "eshipper";
    readonly Fedex: "fedex";
    readonly Freightcom: "freightcom";
    readonly Generic: "generic";
    readonly Purolator: "purolator";
    readonly Royalmail: "royalmail";
    readonly Sendle: "sendle";
    readonly SfExpress: "sf_express";
    readonly Tnt: "tnt";
    readonly Ups: "ups";
    readonly UpsFreight: "ups_freight";
    readonly Usps: "usps";
    readonly UspsInternational: "usps_international";
    readonly Yanwen: "yanwen";
    readonly Yunexpress: "yunexpress";
};
export type ListCarrierNameEnum = typeof ListCarrierNameEnum[keyof typeof ListCarrierNameEnum];
/**
 * @export
 */
export declare const ListStatusEnum: {
    readonly Delivered: "delivered";
    readonly InTransit: "in_transit";
    readonly Incident: "incident";
    readonly Pending: "pending";
    readonly Unknown: "unknown";
};
export type ListStatusEnum = typeof ListStatusEnum[keyof typeof ListStatusEnum];
